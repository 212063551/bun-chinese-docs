import{_ as n,C as l,o as e,c as p,k as t,H as a,Q as o}from"./chunks/framework.9b1e551d.js";const B=JSON.parse('{"title":"什么是 Bun ？","description":"","frontmatter":{},"headers":[],"relativePath":"docs/index.md","filePath":"docs/index.md","lastUpdated":1696865530000}'),c={name:"docs/index.md"},r=o(`<h1 id="什么是-bun" tabindex="-1">什么是 Bun ？ <a class="header-anchor" href="#什么是-bun" aria-label="Permalink to &quot;什么是 Bun ？&quot;">​</a></h1><p>Bun 是一款面向 JavaScript 和 TypeScrip 应用程序的多合一工具包。它是作为一个名为 <code>bun</code> 的可执行文件发布的。</p><p>其核心是 Bun 运行时，这是一个快速的 JavaScript 运行时，旨在替代 Node.js。它是用 Zig 编写的，并在幕后由 JavaScriptCore (苹果公司开发) 提供支持，大大减少了启动时间和内存使用。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.tsx</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 支持开箱即用的 TS 和 JSX</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.tsx</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 支持开箱即用的 TS 和 JSX</span></span></code></pre></div><p>BUN​ 命令行工具还实现了测试运行器、脚本运行器和与 Node.js 兼容的包管理器，所有这些都比现有工具快得多，并且可以在现有的 Node.js 项目中使用，几乎不需要任何更改。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;">                 </span><span style="color:#6A737D;"># 运行\`start\`脚本</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">pk</span><span style="color:#E1E4E8;">g</span><span style="color:#F97583;">&gt;</span><span style="color:#9ECBFF;">​</span><span style="color:#E1E4E8;">             </span><span style="color:#6A737D;"># 安装软件包</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./index.tsx</span><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;"># 使用bun 打包 ./index.tsx</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;">                      </span><span style="color:#6A737D;"># 运行测试</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bunx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cowsay</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;"># 执行一个包</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;">                 </span><span style="color:#6A737D;"># 运行\`start\`脚本</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">pk</span><span style="color:#24292E;">g</span><span style="color:#D73A49;">&gt;</span><span style="color:#032F62;">​</span><span style="color:#24292E;">             </span><span style="color:#6A737D;"># 安装软件包</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./index.tsx</span><span style="color:#24292E;">         </span><span style="color:#6A737D;"># 使用bun 打包 ./index.tsx</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;">                      </span><span style="color:#6A737D;"># 运行测试</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bunx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cowsay</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello, world!&quot;</span><span style="color:#24292E;">   </span><span style="color:#6A737D;"># 执行一个包</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">📌 请注意</p><p>BUN 仍在开发中。使用它可以加快您的开发工作流程，或者在资源受限的环境(如无服务器功能)中运行更简单的生产代码。我们正在努力实现更完整的 Node.js 兼容性以及与现有框架的集成。加入 <a href="https://bun.sh/discord" target="_blank" rel="noreferrer">Discord</a> 的行列，关注 <a href="https://github.com/oven-sh/bun" target="_blank" rel="noreferrer">GitHub 存储库</a>，以跟踪未来的版本。</p></div><p>您可以通过以下快速链接跳转到您需要的页面或继续阅读以了解有关 Bun 的更多信息。</p>`,8),i={class:"quick-link"},d=o('<h2 id="什么是运行时" tabindex="-1">什么是运行时？ <a class="header-anchor" href="#什么是运行时" aria-label="Permalink to &quot;什么是运行时？&quot;">​</a></h2><p>JavaScript(或者更正式地说，ECMAScript)只是一种编程语言的规范。任何人都可以编写一个 JavaScript 引擎，该引擎摄取有效的 JavaScript 程序并执行它。当今使用的两个最流行的引擎是 V8(由谷歌开发)和 JavaScriptCore(由苹果开发)。两者都是开源的。</p><h3 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h3><p>事实上大多数 JavaScript 程序并不是在真空中运行的。程序需要访问外部世界的方式来执行更多有用的任务。例如获取更准确的时间。它们实现附加的 API，然后这些附加 API 可供它们执行的 JavaScript 程序使用。值得注意的是，浏览器自带的 JavaScript 运行时实现了一组特定于 Web 的 API，这些 API 通过全局 <code>window</code> 对象公开。浏览器执行的任何 JavaScript 代码都可以使用这些 API 在当前网页的上下文中实现交互或动态行为。</p><h3 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;Node.js&quot;">​</a></h3><p>Node.js 是一个 JavaScript 运行时，可以在非浏览器环境中使用，如服务器环境。由 Node.js 执行的 JavaScript 程序可以访问一组特定于 Node.js 的全局程序，如 <code>Buffer</code> 、<code>process</code> 和 <code>__dirname</code>，此外还有用于执行操作系统级任务的内置模块，如读取/写入文件 ( <code>node:fs</code> ) 和网络 ( <code>node:net</code>，<code>node:http</code> )。Node.js 还实现了一个基于 CommonJS 的模块系统和解析算法，该算法早于 JavaScript 的原生模块系统。</p><div class="info custom-block"><p class="custom-block-title">📌 小知识</p><ol><li>浏览器 和 Node 都有自己独有的 API，例如：浏览器有 DOM，BOM 而 Node 则没有。</li><li>浏览器 全局对象是 window 而 Node 全局对象是 global</li><li>ES2020 提出的新标准 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis" target="_blank" rel="noreferrer">globalThis</a> 用于兼容 浏览器 和 Node 。</li></ol></div><p>Bun 被设计为比 Node.js 的更快，更精简，更现代的替代品。</p><h2 id="设计目标" tabindex="-1">设计目标 <a class="header-anchor" href="#设计目标" aria-label="Permalink to &quot;设计目标&quot;">​</a></h2><p>Bun 在设计之初就考虑到了当前的 JavaScript 生态系统。</p><ul><li><p>⚡️ 速度 - 目前 bun 进程的启动速度比 Node.js 快 4 倍(您自己试试吧！)</p></li><li><p>TypeScrip 和 JSX 支持 - 您可以直接执行<code>.jsx</code>、<code>.ts</code> 和 <code>.tsx</code> 文件；Bun 的代码转换程序在执行之前会将这些文件转换为普通的 JavaScript。</p></li><li><p>ESM 和 CommonJS 兼容性。世界正在朝着 ES 模块 (ESM) 发展，但是 npm 上的数百万个软件包仍然需要 CommonJS。Bun 推荐 ES 模块，但支持 CommonJS。</p></li><li><p>Web 标准 API。Bun 实现了标准的 Web API，如 Fetch、WebSocket 和 ReadableStream。Bun 使用苹果开发的 <code>JavaScriptCore</code> 引擎提供支持的，因此一些 API，如 <code>Headers</code> 和 <code>URL</code> 直接使用 Safari 的实现。</p></li><li><p>Bun 与 Node.js 兼容。除了支持 Node 风格的模块解析外，Bun 还致力于与内置的 Node.js 全局变量( 进程、缓冲区 ) 和模块 ( 路径、文件系统、http 等 ) 完全兼容。这是一项尚未完成的持续努力。有关当前状态，请参阅 <a href="/docs/runtime/nodejs-apis.html">兼容性</a> 页面。</p></li></ul><p>Bun 不仅仅是运行时。长期目标是成为一个有凝聚力的基础设施工具包，用于使用 JavaScript / TypeScript 构建应用程序，包括包管理器、转换编译器、打包、脚本运行器、测试运行器等。</p>',12);function E(y,u,h,F,b,S){const s=l("Link");return e(),p("div",null,[r,t("div",i,[a(s,{href:"/docs/installation",title:"🛠️ 安装 Bun"}),a(s,{href:"/docs/quickstart",title:"🚪 快速入门"}),a(s,{href:"/docs/cli/install",title:"🛠️ 安装 软件包"}),a(s,{href:"/docs/templates",title:"📄 使用项目模板"}),a(s,{href:"/docs/bundler",title:"📦 使用Bun 进行代码打包"}),a(s,{href:"/docs/api/http",title:"⚙️ 构建一个HTTP服务器"}),a(s,{href:"/docs/api/websockets",title:"🛠️ 构建Websocket服务器"}),a(s,{href:"/docs/api/file-io",title:"✍️ 读写文件"}),a(s,{href:"/docs/api/sqlite",title:"⚙️ 运行SQLite查询"}),a(s,{href:"/docs/cli/test",title:"🛠️ 编写和运行测试"})]),d])}const C=n(c,[["render",E]]);export{B as __pageData,C as default};
