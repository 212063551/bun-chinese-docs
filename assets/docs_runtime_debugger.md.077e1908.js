import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.400dfe9a.js";const e="/assets/Debugger01.3ff38f2c.png",l="/assets/Debugger02.b29d53c8.png",o="/assets/Debugger03.6d326920.png",t="/assets/Debugger04.34a13d9a.png",c="/assets/Debugger05.d6d25ee5.png",r="/assets/Debugger06.9049a695.png",i="/assets/Debugger07.2d4a9ca5.png",m=JSON.parse('{"title":"Debugger ( 调试器 )","description":"","frontmatter":{},"headers":[],"relativePath":"docs/runtime/debugger.md","filePath":"docs/runtime/debugger.md","lastUpdated":1696520830000}'),E={name:"docs/runtime/debugger.md"},y=p(`<h1 id="debugger-调试器" tabindex="-1">Debugger ( 调试器 ) <a class="header-anchor" href="#debugger-调试器" aria-label="Permalink to &quot;Debugger ( 调试器 )&quot;">​</a></h1><p>Bun 使用 <a href="https://github.com/oven-sh/bun/blob/main/packages/bun-vscode/types/jsc.d.ts" target="_blank" rel="noreferrer">WebKit Inspector 协议</a>，因此您可以使用交互式调试器调试代码。出于演示目的，请考虑以下简单的 web 服务器。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Bun.</span><span style="color:#B392F0;">serve</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(req.url);</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello, world!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Bun.</span><span style="color:#6F42C1;">serve</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">req</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">		console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(req.url);</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello, world!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="inspect" tabindex="-1"><code>--inspect</code> <a class="header-anchor" href="#inspect" aria-label="Permalink to &quot;\`--inspect\`&quot;">​</a></h2><p>若要在使用 Bun 运行代码时启用调试，请使用 <code>--inspect</code> 标志。这将在可用端口上自动启动 <code>WebSocket</code> 服务器，该端口可用于检查正在运行的 Bun 进程。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--inspect</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Inspector</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">------------------</span></span>
<span class="line"><span style="color:#B392F0;">Listening</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ws://localhost:6499/0tqxs9exrgrm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Inspect</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">browser:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">https://debug.bun.sh/#localhost:6499/0tqxs9exrgrm</span></span>
<span class="line"><span style="color:#B392F0;">------------------</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Inspector</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">------------------</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--inspect</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Inspector</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">------------------</span></span>
<span class="line"><span style="color:#6F42C1;">Listening</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ws://localhost:6499/0tqxs9exrgrm</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Inspect</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#032F62;">browser:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">https://debug.bun.sh/#localhost:6499/0tqxs9exrgrm</span></span>
<span class="line"><span style="color:#6F42C1;">------------------</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Inspector</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">------------------</span></span></code></pre></div><h2 id="inspect-brk" tabindex="-1"><code>--inspect-brk</code> <a class="header-anchor" href="#inspect-brk" aria-label="Permalink to &quot;\`--inspect-brk\`&quot;">​</a></h2><p><code>--inspect-brk</code> 标志的行为与 <code>--inspect</code> 相同，只是它会在执行的脚本的第一行自动注入一个断点。这对于调试快速运行并立即退出的脚本很有用。</p><h2 id="inspect-wait" tabindex="-1"><code>--inspect-wait</code> <a class="header-anchor" href="#inspect-wait" aria-label="Permalink to &quot;\`--inspect-wait\`&quot;">​</a></h2><p><code>--inspect-wait</code> 标志的行为与 <code>--inspect</code> 相同，只是在调试器附加到正在运行的进程之前，代码不会执行。</p><h2 id="设置调试器的端口或-url" tabindex="-1">设置调试器的端口或 URL <a class="header-anchor" href="#设置调试器的端口或-url" aria-label="Permalink to &quot;设置调试器的端口或 URL&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--inspect=4000</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.ts</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--inspect=localhost:4000</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.ts</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--inspect=localhost:4000/prefix</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--inspect=4000</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.ts</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--inspect=localhost:4000</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.ts</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--inspect=localhost:4000/prefix</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.ts</span></span></code></pre></div><h2 id="debuggers-调试器" tabindex="-1">Debuggers ( 调试器 ) <a class="header-anchor" href="#debuggers-调试器" aria-label="Permalink to &quot;Debuggers ( 调试器 )&quot;">​</a></h2><p>各种调试工具都可以连接到此服务器，以提供交互式调试体验。</p><h2 id="debug-bun-sh" tabindex="-1"><code>debug.bun.sh</code> <a class="header-anchor" href="#debug-bun-sh" aria-label="Permalink to &quot;\`debug.bun.sh\`&quot;">​</a></h2><p>Bun 在 <a href="https://debug.bun.sh/" target="_blank" rel="noreferrer">debug.bun.sh</a> 中托管基于 web 的调试器。它是 <code>WebKit</code> 的 <a href="https://webkit.org/web-inspector/web-inspector-interface/" target="_blank" rel="noreferrer">Web Inspector</a> 界面的修改版本，Safari 用户看起来很熟悉。</p><p>在浏览器中打开提供的 debug.bun.sh URL 以启动调试会话。在该界面中，您将能够查看运行文件的源代码、查看和设置断点以及使用内置控制台执行代码。</p><p><img src="`+e+'" alt="debug"></p><p>让我们设置一个断点。导航到源选项卡; 您应该看到前面的代码。单击行号 3，在我们的 console.log(req.url) 语句上设置断点。</p><p><img src="'+l+'" alt="debug"></p><p>然后在您的 Web 浏览器中访问 <a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a> 。这将向我们的本地主机 Web 服务器发送一个 HTTP 请求。页面看起来好像没有加载。为什么？因为程序在我们之前设置的断点处暂停了执行。</p><p>请注意用户界面是如何改变的。 <img src="'+o+'" alt="debug"></p><p>在这一点上，我们可以做很多事情来反思当前的执行环境。我们可以使用底部的控制台在程序的上下文中运行任意代码，并在断点处完全访问范围内的变量。</p><p><img src="'+t+'" alt="debug"></p><p>在源代码面板的右侧，我们可以看到当前范围内的所有局部变量，并向下钻取以查看它们的属性和方法。在这里，我们正在检查请求变量。</p><p><img src="'+c+'" alt="debug"></p><p>在源代码窗格的左上角，我们可以控制程序的执行。</p><p><img src="'+r+'" alt="debug"></p><p>下面是一个说明控制流按钮的功能的小数据表。</p><ul><li><p>继续执行脚本-继续运行程序，直到下一个断点或异常。</p></li><li><p>跳过-程序将继续到下一行。</p></li><li><p>单步执行--如果当前语句包含函数调用，调试器将“单步执行”被调用的函数。</p></li><li><p>退出-如果当前语句是函数调用，则调试器将完成执行调用，然后将函数 “退出” 到调用它的位置。</p></li></ul><p><img src="'+i+'" alt="debug"></p>',31),d=[y];function u(g,b,h,F,C,B){return a(),n("div",null,d)}const k=s(E,[["render",u]]);export{m as __pageData,k as default};
