import{_ as a,o as s,c as o,Q as e}from"./chunks/framework.400dfe9a.js";const _=JSON.parse('{"title":"自动安装","description":"","frontmatter":{},"headers":[],"relativePath":"docs/runtime/autoimport.md","filePath":"docs/runtime/autoimport.md","lastUpdated":1695570649000}'),n={name:"docs/runtime/autoimport.md"},l=e(`<h1 id="自动安装" tabindex="-1">自动安装 <a class="header-anchor" href="#自动安装" aria-label="Permalink to &quot;自动安装&quot;">​</a></h1><p>如果在工作目录或更高版本中找不到 <code>node_modules</code> 目录，则 Bun 将放弃 Node.js 风格的模块解析，而采用 Bun 模块解析算法。</p><p>在 Bun 风格的模块解析下，所有导入的软件包在执行期间都会自动安装到[<code>全局模块缓存</code>]/docs/install/cache) 中 (与 bun install 使用的缓存相同)。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { foo } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 安装 “最新” 版本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { foo } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 安装 “最新” 版本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span></code></pre></div><p>第一次运行该脚本时，Bun 会自动安装&quot;foo&quot;并存储它。下一次运行脚本时，将使用存储的版本。</p><h2 id="版本解析" tabindex="-1">版本解析 <a class="header-anchor" href="#版本解析" aria-label="Permalink to &quot;版本解析&quot;">​</a></h2><p>为了确定要安装的版本，Bun 遵循以下算法：</p><ul><li>检查项目根目录中的 bun.lockb 文件。如果存在，请使用固定文件中指定的版本。</li><li>否则，向上扫描树以查找包含 package.json 作为依赖项的&quot;foo&quot;。如果找到，请使用指定的 semver 版本或版本范围。</li><li>否则，请使用 <code>Latest</code>。</li></ul><h2 id="缓存行为" tabindex="-1">缓存行为 <a class="header-anchor" href="#缓存行为" aria-label="Permalink to &quot;缓存行为&quot;">​</a></h2><p>一旦确定了版本或版本范围，Bun 将：</p><ol><li>检查模块缓存中是否有兼容版本。如果存在，就使用它。</li><li>在解析 Latest 时，Bun 将检查是否在过去 24 小时内下载并缓存了 Package@Latest。如果是这样的话，就使用它。</li><li>否则，请从 npm 注册表下载并安装适当的版本。</li></ol><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2>`,12),t=[l];function p(c,r,i,d,u,h){return s(),o("div",null,t)}const f=a(n,[["render",p]]);export{_ as __pageData,f as default};
