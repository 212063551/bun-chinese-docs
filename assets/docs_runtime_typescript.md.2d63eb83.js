import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.2e4ef904.js";const h=JSON.parse('{"title":"TypeScript","description":"","frontmatter":{},"headers":[],"relativePath":"docs/runtime/typescript.md","filePath":"docs/runtime/typescript.md","lastUpdated":1695293529000}'),p={name:"docs/runtime/typescript.md"},t=n(`<h1 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;TypeScript&quot;">​</a></h1><p>Bun 将 TypeScript 视为一等公民。</p><blockquote><p>您要为 Bun api (如 <code>bun global</code>) 添加类型声明，请按照介绍中的 <a href="/docs/typescript.html">TypeScript</a> 中的说明进行操作。本页描述了 Bun 运行时如何运行 TypeScript 代码。</p></blockquote><h2 id="运行-ts-文件" tabindex="-1">运行.ts 文件 <a class="header-anchor" href="#运行-ts-文件" aria-label="Permalink to &quot;运行.ts 文件&quot;">​</a></h2><p>Bun 可以像普通 JavaScript 一样直接执行.ts 和.tsx 文件，无需额外配置。如果导入.ts 或.tsx 文件（或 npm 导出这些文件的模块），Bun 会在内部将其转换为 JavaScript，然后执行该文件。</p><div class="info custom-block"><p class="custom-block-title">📌 小知识</p><p>与其他构建工具类似，Bun 不会对文件进行类型检查。如果要捕获静态类型错误，请使用 <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer">tsc</a> (官方 TypeScript CLI)。</p></div><div class="tip custom-block"><p class="custom-block-title">问：转换仍然是必要的吗？</p><p>答：因为 Bun 可以直接执行 typescript 脚本，所以你可能不需要转换你 typescript 程序就可以在生产环境中运行。因为 Bun 已经在内部转换了(.js 和.ts)，所以直接执行.ts / .tsx 源文件的额外性能可以忽略不计。也就是说，如果您使用 Bun 作为开发工具，但仍然以 Node.js 或生产中的浏览器为目标，您仍然需要转换。</p></div><h2 id="路径映射" tabindex="-1">路径映射 <a class="header-anchor" href="#路径映射" aria-label="Permalink to &quot;路径映射&quot;">​</a></h2><p>Bun 在解析模块时，Bun 的运行库会尊重 tsconfig.json 中 <a href="https://www.typescriptlang.org/tsconfig#paths" target="_blank" rel="noreferrer">编译器选项路径</a> 中定义的路径映射。没有其他运行时可以做到这一点。</p><p>参考以下的 tsconfig.json。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;baseUrl&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./src&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;paths&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">&quot;data&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;./data.ts&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;baseUrl&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./src&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;paths&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">&quot;data&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;./data.ts&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Bun 将使用 <code>baseUrl</code> 解析模块路径。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 解析为./src/Components/Button.tsx</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Button } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;components/Button.tsx&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 解析为./src/Components/Button.tsx</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Button } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;components/Button.tsx&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Bun 还将正确解决从 “数据” 中导入的问题。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-1tO5H" id="tab-ER2PPO4" checked="checked"><label for="tab-ER2PPO4">index.ts</label><input type="radio" name="group-1tO5H" id="tab-wNI5_Bd"><label for="tab-wNI5_Bd">data.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { foo } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(foo); </span><span style="color:#6A737D;">// =&gt; &quot;Hello world!&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { foo } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(foo); </span><span style="color:#6A737D;">// =&gt; &quot;Hello world!&quot;</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Hello world!&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">foo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Hello world!&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div></div></div>`,15),l=[t];function e(c,r,i,y,E,d){return a(),o("div",null,l)}const b=s(p,[["render",e]]);export{h as __pageData,b as default};
