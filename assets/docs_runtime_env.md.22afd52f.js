import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.400dfe9a.js";const E=JSON.parse('{"title":"环境变量","description":"","frontmatter":{},"headers":[],"relativePath":"docs/runtime/env.md","filePath":"docs/runtime/env.md","lastUpdated":1696598272000}'),o={name:"docs/runtime/env.md"},l=n(`<h1 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h1><p>Bun 会自动读取您的 <code>.env</code> 文件，并提供以编程方式读取和写入环境变量的方法。另外，Bun 的运行时行为的某些方面可以使用特定于 Bun 的环境变量进行配置。</p><h2 id="设置环境变量" tabindex="-1">设置环境变量 <a class="header-anchor" href="#设置环境变量" aria-label="Permalink to &quot;设置环境变量&quot;">​</a></h2><p>Bun 自动读取以下文件 (按优先级增加的顺序列出)。</p><ul><li><code>.env</code></li><li><code>.env.production</code>、<code>.env.development</code>、<code>.env.test</code> (取决于 <code>NODE_ENV</code> 的值)</li><li><code>.env.local</code></li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FOO</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">hello</span></span>
<span class="line"><span style="color:#E1E4E8;">BAR</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FOO</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">hello</span></span>
<span class="line"><span style="color:#24292E;">BAR</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">world</span></span></code></pre></div><p>当然您也可以通过也可以通过命令行设置变量。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">FOO</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">helloworld</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">FOO</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">helloworld</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span></code></pre></div><p>当然您也以可以通过编程方式的方法将属性分配给 <code>p<wbr>rocess.env</code>。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">p<wbr>rocess.env.FOO</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">p<wbr>rocess.env.FOO</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="dotenv" tabindex="-1"><code>dotenv</code> <a class="header-anchor" href="#dotenv" aria-label="Permalink to &quot;\`dotenv\`&quot;">​</a></h2><p>一般来说，您将不再需要 dotenv，因为 Bun 会读取。环境文件自动。</p><h2 id="读取环境变量" tabindex="-1">读取环境变量 <a class="header-anchor" href="#读取环境变量" aria-label="Permalink to &quot;读取环境变量&quot;">​</a></h2><p>可以通过 p<wbr>rocess.env 访问当前环境变量。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">p<wbr>rocess.env.API_TOKEN</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;secret&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">p<wbr>rocess.env.API_TOKEN</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;secret&quot;</span></span></code></pre></div><p>Bun 还通过 <code>Bun.env</code> 公开这些变量，这是 <code>p<wbr>rocess.env</code> 的简单别名。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Bun.env.API_TOKEN</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;secret&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Bun.env.API_TOKEN</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;secret&quot;</span></span></code></pre></div><p>运行 <code>bun run env</code> 会将所有当前设置的环境变量打印到命令行，这对调试很有用。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">env</span></span>
<span class="line"><span style="color:#6A737D;"># BAZ=stuff</span></span>
<span class="line"><span style="color:#6A737D;"># FOOBAR=aaaaaa</span></span>
<span class="line"><span style="color:#6A737D;"># &lt;lots more lines&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">env</span></span>
<span class="line"><span style="color:#6A737D;"># BAZ=stuff</span></span>
<span class="line"><span style="color:#6A737D;"># FOOBAR=aaaaaa</span></span>
<span class="line"><span style="color:#6A737D;"># &lt;lots more lines&gt;</span></span></code></pre></div><h2 id="配置-bun" tabindex="-1">配置 Bun <a class="header-anchor" href="#配置-bun" aria-label="Permalink to &quot;配置 Bun&quot;">​</a></h2><p>这些环境变量由 Bun 读取并配置其行为的各个方面。</p><table><thead><tr><th style="text-align:center;">配置项名称</th><th style="text-align:center;">配置项描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>TMPDIR</code></td><td style="text-align:center;">Bun 偶尔需要一个目录来存储捆绑或其他操作期间的中间资产。如果未设置，则默认为特定于平台的临时目录: Linux 上的 <code>/tmp</code>，macOS 上的 <code>/private/tmp</code>。</td></tr><tr><td style="text-align:center;"><code>NO_COLOR</code></td><td style="text-align:center;">如果 <code>NO_COLOR=1</code>，则禁用 ANSI 颜色输出。</td></tr><tr><td style="text-align:center;"><code>FORCE_COLOR</code></td><td style="text-align:center;">如果 <code>FORCE_COLOR = 1</code>，则即使设置了 <code>NO_COLOR</code>，ANSI 颜色输出也会强制启用。</td></tr><tr><td style="text-align:center;"><code>DO_NOT_TRACK</code></td><td style="text-align:center;">如果 <code>DO_NOT_TRACK=1</code>，则 <a href="https://do-not-track.dev/" target="_blank" rel="noreferrer">禁用</a> 分析。Bun 记录了包的时间（这样我们就可以用数据来回答，Bun 变得更快了吗？）和功能使用情况 (例如，“人们实际上在使用 macros 吗？”)。请求体大小大约为 60 字节，因此数据量不大。在 bunfig 相当于 <code>telemetry = false</code>。</td></tr></tbody></table>`,22),t=[l];function p(c,r,d,i,y,h){return e(),a("div",null,t)}const v=s(o,[["render",p]]);export{E as __pageData,v as default};
