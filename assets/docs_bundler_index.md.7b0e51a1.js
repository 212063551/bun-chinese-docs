import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.400dfe9a.js";const p="/assets/bundler.84398ca6.png",h=JSON.parse('{"title":"Bun.build","description":"","frontmatter":{},"headers":[],"relativePath":"docs/bundler/index.md","filePath":"docs/bundler/index.md","lastUpdated":1696598272000}'),o={name:"docs/bundler/index.md"},e=l(`<h1 id="bun-build" tabindex="-1"><code>Bun.build</code> <a class="header-anchor" href="#bun-build" aria-label="Permalink to &quot;\`Bun.build\`&quot;">​</a></h1><p>Bun 的快速原生打包器，现在处于测试阶段。它可以通过 <code>bun build</code> CLI 命令或 Bun.build() JavaScript API 使用。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-tE9F3" id="tab-aAKPOzi" checked="checked"><label for="tab-aAKPOzi">JavaScript</label><input type="radio" name="group-tE9F3" id="tab-IerW4F3"><label for="tab-IerW4F3">CLI</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	entrypoints: [</span><span style="color:#9ECBFF;">&#39;./index.tsx&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">	outdir: </span><span style="color:#9ECBFF;">&#39;./build&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	entrypoints: [</span><span style="color:#032F62;">&#39;./index.tsx&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">	outdir: </span><span style="color:#032F62;">&#39;./build&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./index.tsx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./index.tsx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./build</span></span></code></pre></div></div></div><blockquote><p>bun 很快。下面的数字代表了 esbuild 的 <a href="https://github.com/oven-sh/bun/tree/main/bench/bundle" target="_blank" rel="noreferrer">three.js 基准测试的性能</a>。</p></blockquote><p><img src="`+p+`" alt="bundler"></p><blockquote><p>从头开始打包 three.js 的 10 个副本，使用 sourcemaps 和 minification</p></blockquote><h2 id="为什么要打包" tabindex="-1">为什么要打包？ <a class="header-anchor" href="#为什么要打包" aria-label="Permalink to &quot;为什么要打包？&quot;">​</a></h2><p>bundler 是 JavaScript 生态系统中的关键基础设施。简要概述为什么打包如此重要:</p><ul><li><p><strong>减少 HTTP 请求</strong>： <code>node_modules</code> 中的单个包可能包含数百个文件，大型应用程序可能具有数十个类似依赖项。使用单独的 HTTP 请求加载这些文件中的每一个效率很低下，因此使用打包程序将我们的应用程序源代码转换为较少数量的自包含 “捆绑包”，可以通过单个请求加载。</p></li><li><p><strong>代码转换</strong>：现代应用程序通常使用 <code>TypeScript</code>，<code>JSX</code> 和 <code>CSS</code> 模块等语言或工具构建，所有这些都必须转换为纯 <code>JavaScript</code> 和 <code>CSS</code>，然后才能被浏览器使用。打包器是配置这些转换的自然场所。</p></li><li><p><strong>框架功能</strong>：框架依靠 打包 插件和代码转换来实现常见模式，如文件系统路由、客户端-服务器代码协同定位 (想想 getServerSideProps 或 Remix 加载器) 和服务器组件。</p></li></ul><p>让我们跳到 打包器 API 中。</p><div class="warning custom-block"><p class="custom-block-title">🚨 请注意，Bun 打包器 并非用于替换 tsc 进行类型检测或生成类型声明。 :::</p><h2 id="基本示例" tabindex="-1">基本示例 <a class="header-anchor" href="#基本示例" aria-label="Permalink to &quot;基本示例&quot;">​</a></h2><p>让我们构建我们的第一个包。您有以下两个文件，它们实现了一个简单的客户端渲染的 React 应用程序。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-mUS9K" id="tab-CV6VXwT" checked="checked"><label for="tab-CV6VXwT">./index.tsx</label><input type="radio" name="group-mUS9K" id="tab-FRVTD_C"><label for="tab-FRVTD_C">./Component.tsx</label></div><div class="blocks"><div class="language-tsx vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> ReactDOM </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-dom/client&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Component } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./Component&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReactDOM.</span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">root.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">message</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Sup!&#39;</span><span style="color:#E1E4E8;"> /&gt;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> ReactDOM </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-dom/client&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Component } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./Component&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReactDOM.</span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">root.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(&lt;</span><span style="color:#005CC5;">Component</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">message</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Sup!&#39;</span><span style="color:#24292E;"> /&gt;);</span></span></code></pre></div><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> ReactDOM </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-dom/client&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Component } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./Component&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReactDOM.</span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">root.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">Component</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">message</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;Sup!&#39;</span><span style="color:#E1E4E8;"> /&gt;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> ReactDOM </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-dom/client&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Component } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./Component&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">root</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReactDOM.</span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">root.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(&lt;</span><span style="color:#005CC5;">Component</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">message</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;Sup!&#39;</span><span style="color:#24292E;"> /&gt;);</span></span></code></pre></div></div></div></div><p>这里，index.tsx 是我们应用程序的 “入口点”。通常，这将是一个执行一些副作用的脚本，例如启动服务器或-在这种情况下-初始化 React root。因为我们使用的是 <code>TypeScript</code> 和 <code>JSX</code>，所以我们需要将代码打包在一起，然后才能将其发送到浏览器。</p><p>要创建我们的包:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-DgEYj" id="tab-cjY1tNr" checked="checked"><label for="tab-cjY1tNr">JavaScript</label><input type="radio" name="group-DgEYj" id="tab-zHNPlL_"><label for="tab-zHNPlL_">CLI</label></div><div class="blocks"><div class="language-tsx vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	entrypoints: [</span><span style="color:#9ECBFF;">&#39;./index.tsx&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">	outdir: </span><span style="color:#9ECBFF;">&#39;./out&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	entrypoints: [</span><span style="color:#032F62;">&#39;./index.tsx&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">	outdir: </span><span style="color:#032F62;">&#39;./out&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./index.tsx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./out</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./index.tsx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./out</span></span></code></pre></div></div></div><p>对于入口点中指定的每个文件，Bun 将生成一个新的包。该包将被写入磁盘的./out 目录 ( 从当前工作目录解析 )。运行构建后，文件系统如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">.</span></span>
<span class="line"><span style="color:#e1e4e8;">├── index.tsx</span></span>
<span class="line"><span style="color:#e1e4e8;">├── Component.tsx</span></span>
<span class="line"><span style="color:#e1e4e8;">└── out</span></span>
<span class="line"><span style="color:#e1e4e8;">    └── index.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">.</span></span>
<span class="line"><span style="color:#24292e;">├── index.tsx</span></span>
<span class="line"><span style="color:#24292e;">├── Component.tsx</span></span>
<span class="line"><span style="color:#24292e;">└── out</span></span>
<span class="line"><span style="color:#24292e;">    └── index.js</span></span></code></pre></div><p>out/index.js 的内容将如下所示:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">// ~20k lines of code</span></span>
<span class="line"><span style="color:#6A737D;">// including the contents of \`react-dom/client\` and all its dependencies</span></span>
<span class="line"><span style="color:#6A737D;">// this is where the $jsxDEV and $createRoot functions are defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Component.tsx</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Component</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$jsxDEV</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			children: props.message,</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">	);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// index.tsx</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rootNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$createRoot</span><span style="color:#E1E4E8;">(rootNode);</span></span>
<span class="line"><span style="color:#E1E4E8;">root.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">$jsxDEV</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		Component,</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			message: </span><span style="color:#9ECBFF;">&#39;Sup!&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">this</span></span>
<span class="line"><span style="color:#E1E4E8;">	)</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#6A737D;">// ~20k lines of code</span></span>
<span class="line"><span style="color:#6A737D;">// including the contents of \`react-dom/client\` and all its dependencies</span></span>
<span class="line"><span style="color:#6A737D;">// this is where the $jsxDEV and $createRoot functions are defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Component.tsx</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Component</span><span style="color:#24292E;">(</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$jsxDEV</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&#39;p&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			children: props.message,</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">	);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// index.tsx</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rootNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">$createRoot</span><span style="color:#24292E;">(rootNode);</span></span>
<span class="line"><span style="color:#24292E;">root.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">$jsxDEV</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">		Component,</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			message: </span><span style="color:#032F62;">&#39;Sup!&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">undefined</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">this</span></span>
<span class="line"><span style="color:#24292E;">	)</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><details class="details custom-block"><summary>教程: 在浏览器中运行此文件</summary><p>我们可以在浏览器中加载此文件，以查看我们的应用程序。在 out 目录中创建一个 index.html 文件:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">touch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">out/index.html</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">touch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">out/index.html</span></span></code></pre></div><p>然后将以下内容粘贴到其中:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/index.js&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/index.js&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;/</span><span style="color:#22863A;">body</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">html</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>然后启动一个服务于 out 目录的静态文件服务器:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bunx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">serve</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">out</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bunx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">serve</span><span style="color:#24292E;"> </span><span style="color:#032F62;">out</span></span></code></pre></div><p>请访问 http:// localhost:5000 查看打包的应用程序的运行情况。</p></details><h2 id="监视模式" tabindex="-1">监视模式 <a class="header-anchor" href="#监视模式" aria-label="Permalink to &quot;监视模式&quot;">​</a></h2><p>与运行库和测试运行器一样，打包器本身也支持监视模式。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./index.tsx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./out</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./index.tsx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./out</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span></span></code></pre></div><h2 id="内容类型" tabindex="-1">内容类型 <a class="header-anchor" href="#内容类型" aria-label="Permalink to &quot;内容类型&quot;">​</a></h2><p>与 Bun 运行时一样，打包器支持开箱即用的文件类型数组。下表分解了打包器的标准 “加载器” 集。有关完整文档，请参阅 <a href="/docs/runtime/loaders.html">Bundler &gt; File types</a>。</p><hr><p><code>.js</code> <code>.cjs</code> <code>.mjs</code> <code>.mts</code> <code>.cts</code> <code>.ts</code> <code>.tsx</code></p><blockquote><p>详细信息： 使用 Bun 的内置转换器来解析文件，并将 TypeScript/JSX 语法转换为 vanilla JavaScript。bundler 执行一组默认转换，包括死代码消除，树摇动和环境变量内联。目前，Bun 不会尝试向下转换语法; 如果您最近使用 ECMAScript 语法，这将反映在捆绑代码中。</p></blockquote><hr><p><code>.json</code></p><blockquote><p>JSON 文件被解析并作为 JavaScript 对象内联到包中。</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./package.json&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">pkg.name</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;my-package&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pkg</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./package.json&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">pkg.name</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;my-package&quot;</span></span></code></pre></div><hr><p><code>.txt</code></p><blockquote><p>文本文件的内容被读取并作为字符串内联到包中。</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">contents</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./file.txt&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">console.log(contents</span><span style="color:#E1E4E8;">); </span><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> =</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello, world!&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">contents</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./file.txt&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">console.log(contents</span><span style="color:#24292E;">); </span><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> =</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello, world!&quot;</span></span></code></pre></div><hr><p><code>.node</code> <code>.wasm</code></p><blockquote><p>这些文件受 Bun 运行时支持，但在绑定期间它们被视为<a href="/docs/bundler.html#assets">资源</a>。</p></blockquote><h2 id="资产" tabindex="-1">资产 <a class="header-anchor" href="#资产" aria-label="Permalink to &quot;资产&quot;">​</a></h2><p>如打包器遇到扩展名无法识别的导入，它会将导入的文件视为外部文件。引用的文件将按原样复制到 outdir 中，并将导入解析为该文件的路径。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-nBUH8" id="tab-Q5ojwci" checked="checked"><label for="tab-Q5ojwci">Input</label><input type="radio" name="group-nBUH8" id="tab-rMAeCp5"><label for="tab-rMAeCp5">Output</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// bundle entrypoint</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> logo </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./logo.svg&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(logo);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// bundle entrypoint</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> logo </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./logo.svg&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(logo);</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// bundled output</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> logo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./logo-ab237dfe.svg&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(logo);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// bundled output</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> logo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./logo-ab237dfe.svg&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(logo);</span></span></code></pre></div></div></div><blockquote><p>文件加载器的确切行为也受 <a href="/docs/bundler.html#naming"><code>naming</code></a> 和 <a href="/docs/bundler.html#publicpath"><code>publicPath</code></a> 的影响。</p></blockquote><p>有关文件加载器的更多完整文档，请参阅 <a href="/docs/bundler/loaders.html#file">bundler &gt; Loaders</a> 页面。</p><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><p>可以使用 <a href="/docs/bundler/plugins.html">插件</a> 覆盖或扩展此表中描述的行为。有关完整文档，请参阅 <a href="/docs/bundler/plugins.html">Bundler&gt; loader</a> 页面。</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h2 id="entrypoints" tabindex="-1"><code>entrypoints</code> <a class="header-anchor" href="#entrypoints" aria-label="Permalink to &quot;\`entrypoints\`&quot;">​</a></h2><p>必填项. 与应用程序的入口点相对应的路径数组。将为每个入口点生成一个包。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-dGB5H" id="tab-tDkA71G" checked="checked"><label for="tab-tDkA71G">JavaScript</label><input type="radio" name="group-dGB5H" id="tab-VoxC_Tt"><label for="tab-VoxC_Tt">CLI</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	entrypoints: [</span><span style="color:#9ECBFF;">&#39;./index.ts&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; { success: boolean, outputs: BuildArtifact[], logs: BuildMessage[] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	entrypoints: [</span><span style="color:#032F62;">&#39;./index.ts&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; { success: boolean, outputs: BuildArtifact[], logs: BuildMessage[] }</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--entrypoints</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./index.ts</span></span>
<span class="line"><span style="color:#6A737D;"># the bundle will be printed to stdout</span></span>
<span class="line"><span style="color:#6A737D;"># &lt;bundled code&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--entrypoints</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./index.ts</span></span>
<span class="line"><span style="color:#6A737D;"># the bundle will be printed to stdout</span></span>
<span class="line"><span style="color:#6A737D;"># &lt;bundled code&gt;</span></span></code></pre></div></div></div><h2 id="outdir" tabindex="-1"><code>outdir</code> <a class="header-anchor" href="#outdir" aria-label="Permalink to &quot;\`outdir\`&quot;">​</a></h2><p>将写入输出文件的目录。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ODiXJ" id="tab-BIF-TLb" checked="checked"><label for="tab-BIF-TLb">JavaScript</label><input type="radio" name="group-ODiXJ" id="tab-9S8PIlp"><label for="tab-9S8PIlp">CLI</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	entrypoints: [</span><span style="color:#9ECBFF;">&#39;./index.ts&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">	outdir: </span><span style="color:#9ECBFF;">&#39;./out&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; { success: boolean, outputs: BuildArtifact[], logs: BuildMessage[] }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	entrypoints: [</span><span style="color:#032F62;">&#39;./index.ts&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">	outdir: </span><span style="color:#032F62;">&#39;./out&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; { success: boolean, outputs: BuildArtifact[], logs: BuildMessage[] }</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--entrypoints</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./index.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./out</span></span>
<span class="line"><span style="color:#6A737D;"># 打包文件的摘要将打印到stdout</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--entrypoints</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./index.ts</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./out</span></span>
<span class="line"><span style="color:#6A737D;"># 打包文件的摘要将打印到stdout</span></span></code></pre></div></div></div><p>如果 outdir 没有传递给 JavaScript API，打包的代码将不会写入磁盘。打包文件在 BuildArtifact 对象数组中返回。这些对象是具有额外属性的 Blobs; 有关完整文档，请参见<a href="/docs/bundler.html#outputs">产出</a>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	entrypoints: [</span><span style="color:#9ECBFF;">&#39;./index.ts&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">of</span><span style="color:#E1E4E8;"> result.outputs) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 可以作为 blob 使用</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Bun将设置Content-Type和Etag标头</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Response</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 可以手动编写，但在这种情况下应该使用 &#39;outdir&#39;。</span></span>
<span class="line"><span style="color:#E1E4E8;">	Bun.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;out&#39;</span><span style="color:#E1E4E8;">, result.path), result);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	entrypoints: [</span><span style="color:#032F62;">&#39;./index.ts&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">of</span><span style="color:#24292E;"> result.outputs) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 可以作为 blob 使用</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Bun将设置Content-Type和Etag标头</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Response</span><span style="color:#24292E;">(result);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// 可以手动编写，但在这种情况下应该使用 &#39;outdir&#39;。</span></span>
<span class="line"><span style="color:#24292E;">	Bun.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;out&#39;</span><span style="color:#24292E;">, result.path), result);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当设置 outdir 时，BuildArtifact 上的 path 属性将是它写入的绝对路径。</p><h2 id="target" tabindex="-1"><code>target</code> <a class="header-anchor" href="#target" aria-label="Permalink to &quot;\`target\`&quot;">​</a></h2><p>打包的预期执行环境。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-5S3iU" id="tab-oE5sclK" checked="checked"><label for="tab-oE5sclK">JavaScript</label><input type="radio" name="group-5S3iU" id="tab-eKQjbeY"><label for="tab-eKQjbeY">CLI</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Bun.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	entrypoints: [</span><span style="color:#9ECBFF;">&#39;./index.ts&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">	outdir: </span><span style="color:#9ECBFF;">&#39;./out&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	target: </span><span style="color:#9ECBFF;">&#39;browser&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// default</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Bun.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	entrypoints: [</span><span style="color:#032F62;">&#39;./index.ts&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">	outdir: </span><span style="color:#032F62;">&#39;./out&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	target: </span><span style="color:#032F62;">&#39;browser&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// default</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--entrypoints</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./index.ts</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--outdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./out</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--target</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">browser</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--entrypoints</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./index.ts</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--outdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./out</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--target</span><span style="color:#24292E;"> </span><span style="color:#032F62;">browser</span></span></code></pre></div></div></div><p>\` 根据目标，Bun 将应用不同的模块解析规则和优化。</p><hr><p><code>browser</code></p><blockquote><p>默认值。用于生成供浏览器执行的包。在解析导入时优先考虑 “浏览器” 导出条件。导入任何内置模块，如 node:events 或 node:path 将起作用，但调用一些函数，如 fs.readFile 将不起作用。</p></blockquote><hr><p><code>bun</code></p><blockquote><p>用于生成旨在由 Bun 运行时运行的 bundle。在许多情况下，没有必要捆绑服务器端代码; 您可以直接执行源代码而无需修改。但是，捆绑服务器代码可以减少启动时间并提高运行性能。</p></blockquote><blockquote><p>使用 target: “bun” 生成的所有捆绑包都带有特殊的 // @ bun pragma 标记，这向 Bun 运行时指示在执行之前无需重新转译文件。</p></blockquote><blockquote><p>如果任何入口点包含 Bun shebang (#!/usr/bin/env bun)，捆绑程序将默认为 target: “bun” 而不是 “browser”。</p></blockquote><hr><p><code>node</code></p><blockquote><p>用于生成打算由 Node.js 运行的包。解析导入时优先考虑“node”导出条件，并输出.mjs。在未来，这将自动多填充 Bun global 和其他内置的 BUN：*模块，尽管这还没有实现。</p></blockquote><hr><p>等待翻译...</p>`,72),t=[e];function c(r,E,y,i,d,u){return a(),n("div",null,t)}const b=s(o,[["render",c]]);export{h as __pageData,b as default};
