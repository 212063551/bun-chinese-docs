import{_ as s,o,c as a,Q as n}from"./chunks/framework.9b1e551d.js";const m=JSON.parse('{"title":"模块解析","description":"","frontmatter":{},"headers":[],"relativePath":"docs/runtime/modules.md","filePath":"docs/runtime/modules.md","lastUpdated":1696865530000}'),l={name:"docs/runtime/modules.md"},p=n(`<h1 id="模块解析" tabindex="-1">模块解析 <a class="header-anchor" href="#模块解析" aria-label="Permalink to &quot;模块解析&quot;">​</a></h1><p>JavaScript 中的模块解析是一个复杂的话题。</p><p>生态系统目前正处于从 CommonJS 模块到原生 ES 模块的长期的过渡过程中。TypeScrip 围绕与 ESM 不兼容的导入扩展强制执行自己的一组规则。不同的构建工具通过不同的非兼容机制支持路径重新映射。</p><p>Bun 旨在提供一个一致且可预测的模块解析系统，该系统可以正常工作。不幸的是，它仍然很复杂。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><p>请考虑以下文件。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2SB8P" id="tab-tVu8A44" checked="checked"><label for="tab-tVu8A44">index.ts</label><input type="radio" name="group-2SB8P" id="tab-SwSifDE"><label for="tab-SwSifDE">hello.ts</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./hello&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">();</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello world!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></div></div><p>当我们运行 index.ts 时，它会打印 “Hello world!”。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.ts</span></span>
<span class="line"><span style="color:#6A737D;"># Hello world!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.ts</span></span>
<span class="line"><span style="color:#6A737D;"># Hello world!</span></span></code></pre></div><p>在本例中，我们从 <code>./Hello</code> 导入，这是一个没有扩展名的相对路径。扩展导入是可选的，但需要支持。要解决此导入问题，Bun 将按顺序检查以下文件：</p><ul><li><code>./hello.ts</code></li><li><code>./hello.tsx</code></li><li><code>./hello.js</code></li><li><code>./hello.mjs</code></li><li><code>./hello.cjs</code></li><li><code>./hello/index.ts</code></li><li><code>./hello/index.js</code></li><li><code>./hello/index.json</code></li><li><code>./hello/index.mjs</code></li></ul><p>导入路径不区分大小写，这意味着这些都是有效的导入:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./hello&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./HELLO&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./hElLo&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./HELLO&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./hElLo&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>导入路径可以选择性地包括扩展名。如果存在扩展名，Bun 将只检查具有该扩展名的文件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./hello&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./hello.ts&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// this works</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./hello.ts&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// this works</span></span></code></pre></div><p>如果您从 <code>*.js{x}</code> 导入，Bun 将额外检查匹配的 <code>*.ts{x}</code> 文件，以与 TypeScrip 的 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html#new-file-extensions" target="_blank" rel="noreferrer">ES 模块</a>支持兼容。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./hello&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./hello.ts&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// this works</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { hello } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./hello.js&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// this also works</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./hello&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./hello.ts&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// this works</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { hello } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./hello.js&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// this also works</span></span></code></pre></div><p>BUN 同时支持 ES 模块(<code>import</code> / <code>export</code> 语法)和 CommonJS 模块(<code>required()</code> / <code>mode.exports</code>)。下面的 CommonJS 版本也可以在 Bun 中使用。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group--MJcf" id="tab-8Ph02hn" checked="checked"><label for="tab-8Ph02hn">index.js</label><input type="radio" name="group--MJcf" id="tab-rTd6mMa"><label for="tab-rTd6mMa">hello.js</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">hello</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./hello&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">hello</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./hello&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">();</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello world!&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">.hello </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> hello;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Hello world!&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">exports</span><span style="color:#24292E;">.hello </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> hello;</span></span></code></pre></div></div></div><p>Bun 不鼓励在新项目中使用 CommonJS。</p><h2 id="模块系统" tabindex="-1">模块系统 <a class="header-anchor" href="#模块系统" aria-label="Permalink to &quot;模块系统&quot;">​</a></h2><p>Bun 对 CommonJS 和 ES 模块有原生支持。ES 模块是新项目推荐的模块格式，但 CommonJS 模块在 Node.js 生态系统中仍被广泛使用。</p><p>在 Bun 的 JavaScript 运行时，ES 模块和 CommonJS 模块都可以使用 <code>require</code>。如果目标模块是 ES 模块，require 返回模块命名空间对象 (相当于 import * as)。如果目标模块是 CommonJS 模块，则 <code>require</code> 返回 <code>module.export</code>s 对象 (如在 Node.js 中)。</p><table><thead><tr><th style="text-align:center;">模块类型</th><th style="text-align:center;"><code>require()</code></th><th style="text-align:center;"><code>import \\* as</code></th></tr></thead><tbody><tr><td style="text-align:center;">ES Module</td><td style="text-align:center;">模块命名空间</td><td style="text-align:center;">模块命名空间</td></tr><tr><td style="text-align:center;">CommonJS</td><td style="text-align:center;">模块导出</td><td style="text-align:center;">默认为 module.exports，module.exports 的键 <code>.exports</code> 命名为 <code>exports</code></td></tr></tbody></table><h2 id="使用-required" tabindex="-1">使用 <code>required()</code> <a class="header-anchor" href="#使用-required" aria-label="Permalink to &quot;使用 \`required()\`&quot;">​</a></h2><p>您可以使用 required () 导入任何文件或包，甚至 <code>ts</code> 或 <code>.mjs</code> 文件。</p><details class="details custom-block"><summary>📌 <strong>什么是 CommonJS 模块？</strong></summary><p>2016 年，ECMAScript 增加了对 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules" target="_blank" rel="noreferrer">ES Modules</a>的支持。ES 模块是 JavaScript 模块的标准。然而，数以百万计的 NPM 包仍然使用 CommonJS 模块。</p><p>CommonJS 模块是使用 <code>mode.exports</code> 导出值的模块。通常，<code>require</code> 用于导入 CommonJS 模块。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// my-commonjs.cjs</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stuff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./stuff&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { stuff };</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// my-commonjs.cjs</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stuff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./stuff&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { stuff };</span></span></code></pre></div><p>CommonJS 和 ES 模块最大的区别是 CommonJS 模块是同步的，而 ES 模块是异步的。还有其他区别。</p><ul><li>ES 模块支持顶级 <code>await</code>，而 CommonJS 模块不支持。</li><li>ES 模块始终处于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noreferrer">严格模式</a>，而 CommonJS 模块则没有。</li><li>浏览器没有对 CommonJS 模块的原生支持，但是它们通过 <code>&lt;script type=&quot;module&quot;&gt;</code>对 ES 模块有原生支持。</li><li>CommonJS 模块不能静态分析，而 ES 模块只允许静态导入和导出。</li></ul><p><strong>CommonJS 模块</strong>：这些是在 JavaScript 中使用的一种模块系统。CommonJS 模块的一个关键特性是它们同步加载和执行。这意味着当您导入 CommonJS 模块时，该模块中的代码会立即运行，并且您的程序会等待它完成，然后再继续执行下一个任务。这类似于从头到尾不跳页地阅读一本书。</p><p><strong>ES 模块(ESM)</strong>：这是在 JavaScript 中引入的另一种模块系统类型。与 CommonJS 相比，它们的行为略有不同。在 ESM 中，静态导入(使用 <code>import</code> 语句进行的导入)是同步的，就像 CommonJS 一样。这意味着当您使用常规的 <code>import</code> 语句导入 ESM 时，该模块中的代码将立即运行，并且您的程序将以循序渐进的方式进行。把它想象成一页一页地读一本书。</p><p><strong>动态导入</strong> ：现在，可能会令人困惑的部分来了。ES 模块还支持通过 <code>import()</code> 函数动态导入模块。这称为“动态导入”，它是异步的，因此它不会阻塞主程序的执行。相反，它会在程序继续运行的同时在后台获取和加载模块。一旦模块准备好，您就可以使用它了。这就像是在你还在阅读的时候从一本书中获得额外的信息，而不需要暂停阅读。</p><h4 id="总而言之" tabindex="-1">总而言之： <a class="header-anchor" href="#总而言之" aria-label="Permalink to &quot;总而言之：&quot;">​</a></h4><ul><li>CommonJS 模块和静态 ES 模块 ( <code>import</code> 语句 ) 以类似的同步方式工作，就像从头到尾阅读一本书一样。</li><li>ES 模块还提供了使用 <code>import()</code> 函数异步导入模块的选项。这就像在阅读本书的中间不停地查找额外的信息。</li></ul></details><h2 id="使用-import" tabindex="-1">使用 import() <a class="header-anchor" href="#使用-import" aria-label="Permalink to &quot;使用 import()&quot;">​</a></h2><p>您可以导入任何文件或包，甚至 cjs 文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { foo } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./foo&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 扩展是可选的</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> bar </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./bar.ts&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { stuff } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./my-commonjs.cjs&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { foo } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./foo&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 扩展是可选的</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> bar </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./bar.ts&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { stuff } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./my-commonjs.cjs&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="一起使用-import-和-require" tabindex="-1">一起使用 <code>import</code> 和 <code>require()</code> <a class="header-anchor" href="#一起使用-import-和-require" aria-label="Permalink to &quot;一起使用 \`import\` 和 \`require()\`&quot;">​</a></h2><p>在 Bun 中，您可以在同一文件中使用 <code>import</code> 或 <code>require</code> 引文它们始终都有效。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { stuff } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./my-commonjs.cjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Stuff </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./my-commonjs.cjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myStuff</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./my-commonjs.cjs&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { stuff } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./my-commonjs.cjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Stuff </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./my-commonjs.cjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myStuff</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./my-commonjs.cjs&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h4 id="顶级-await" tabindex="-1">顶级 await <a class="header-anchor" href="#顶级-await" aria-label="Permalink to &quot;顶级 await&quot;">​</a></h4><p>此规则的唯一例外是顶级 await。您不能要求 require() 使用顶级 await 的文件，因为 require() 函数本质上是同步的。</p><p>幸运的是，很少有库使用顶级 await ，因此这几乎不是问题。但是，如果在应用程序代码中使用顶级 await，请确保该文件不会从应用程序中的其他位置被 require()。相反，您应该使用 import 或 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import" target="_blank" rel="noreferrer">import()</a>。</p><h2 id="导入包" tabindex="-1">导入包 <a class="header-anchor" href="#导入包" aria-label="Permalink to &quot;导入包&quot;">​</a></h2><p>Bun 实现了 Node.js 模块解析算法，因此您可以使用 packages 从 node_modules 导入包。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { stuff } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { stuff } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>此算法的完整规范已正式记录在 <a href="https://nodejs.org/api/modules.html" target="_blank" rel="noreferrer">Node.js 文档</a>中; 我们在此不再重复。简而言之: 如果从 “foo” 导入，则 Bun 会在文件系统上扫描包含包 foo 的 <code>node_modules</code> 目录。</p><p>一旦找到 foo 包，Bun 就会读取 Package.json 以确定应该如何导入该包。为了确定包的入口点，Bun 首先读取 Exports 字段并检查以下条件。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;bun&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;worker&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;node&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;require&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//如果导入方为CommonJS</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;import&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.mjs&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 如果导入方是ES模块</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;default&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;exports&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;bun&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;worker&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;node&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;require&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//如果导入方为CommonJS</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;import&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.mjs&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 如果导入方是ES模块</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;default&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>无论这些条件中的哪一个首先出现在 Package.json 中，都将用于确定包的入口点。</p><p>Bun 尊重 <a href="https://nodejs.org/api/packages.html#subpath-exports" target="_blank" rel="noreferrer"><code>&quot;exports&quot;</code></a> 和 <a href="https://nodejs.org/api/packages.html#imports" target="_blank" rel="noreferrer"><code>&quot;imports&quot;</code></a> 这两个子路径。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;.&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;exports&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;.&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>子路径 import 和 require 相互配合工作。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;.&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">&quot;import&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.mjs&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">&quot;require&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;exports&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;.&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">&quot;import&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.mjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">&quot;require&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>与 Node.js 中一样，在 <code>&quot;exports&quot;</code> 映射中指定任何子路径都将阻止导入其他子路径；您只能导入显式导出的文件。给定上面的 Package.json：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> stuff </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 这很管用</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> stuff </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;foo/index.mjs&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 这不是</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> stuff </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 这很管用</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> stuff </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;foo/index.mjs&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 这不是</span></span></code></pre></div><blockquote><p>TypeScript -注意 Bun 支持特殊的 “bun” 出口条件。如果您的库是用 TypeScript 编写的，则可以直接发布您的 (未转换!) TypeScript 文件到 npm。如果您在 “bun” 条件下指定包的 *.ts 入口点，则 Bun 将直接导入并执行您的 TypeScript 源文件。</p></blockquote><p>如果未定义 <code>&quot;module&quot;</code>，Bun 将回退到 <code>&quot;module&quot;</code> (仅限 ESM 导入)然后是 <a href="https://nodejs.org/api/packages.html#main" target="_blank" rel="noreferrer"><code>&quot;Main&quot;</code></a>。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;name&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;module&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;main&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;name&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;module&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./index.js&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="路径映射" tabindex="-1">路径映射 <a class="header-anchor" href="#路径映射" aria-label="Permalink to &quot;路径映射&quot;">​</a></h2><p>本着将 TypeScript 视为一流公民的精神，Bun 运行时将根据 <code>tsconfig.json</code> 中的 <a href="https://www.typescriptlang.org/tsconfig#paths" target="_blank" rel="noreferrer"><code>compilerOptions.paths</code></a> 字段重新映射导入路径。这是与 Node.js 的主要分歧，Node.js 不支持任何形式的导入路径重新映射。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;paths&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;./config.ts&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 将说明符映射到文件</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#79B8FF;">&quot;components/*&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;components/*&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// 通配符匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#005CC5;">&quot;paths&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">&quot;config&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;./config.ts&quot;</span><span style="color:#24292E;">], </span><span style="color:#6A737D;">// 将说明符映射到文件</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#005CC5;">&quot;components/*&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;components/*&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// 通配符匹配</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>如果您不是 TypeScript 用户，则可以在项目根目录中创建 <a href="https://code.visualstudio.com/docs/languages/jsconfig" target="_blank" rel="noreferrer"><code>jsconfig.json</code></a> 以实现相同的行为。</p><details class="details custom-block"><summary>Bun 中 CommonJS 互操作的底层细节</summary><p>BUN 的 JavaScript 运行时具有对 CommonJS 的本机支持。当 Bun 的 JavaScript 代码转换程序检测到 mode.exports 的用法时，它会将该文件视为 CommonJS。然后，模块加载器将转换后的模块包装在如下所示的函数中：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">exports</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">require</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// transpiled module</span></span>
<span class="line"><span style="color:#E1E4E8;">})(</span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;">, require);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">module</span><span style="color:#24292E;">, </span><span style="color:#E36209;">exports</span><span style="color:#24292E;">, </span><span style="color:#E36209;">require</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// transpiled module</span></span>
<span class="line"><span style="color:#24292E;">})(</span><span style="color:#005CC5;">module</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">exports</span><span style="color:#24292E;">, require);</span></span></code></pre></div><p><code>module</code>，<code>exports</code> 和 <code>require</code> 非常像 Node.js 中的 <code>module</code>，<code>exports</code> 和 <code>require</code>。在 C++中，这些是通过一个带作用域的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with" target="_blank" rel="noreferrer">范围</a> 赋值的。内部映射存储导出对象，以便在模块完全加载之前处理周期性的请求调用。</p><p>成功评估 CommonJS 模块后，将创建一个合成模块记录，默认 ES <a href="https://github.com/oven-sh/bun/blob/9b6913e1a674ceb7f670f917fc355bb8758c6c72/src/bun.js/bindings/CommonJSModuleRecord.cpp#L212-L213" target="_blank" rel="noreferrer">模块导出设置为 <code>module.exports</code></a> 和 <code>Module.exports</code> 对象的键将重新导出为命名导出 (如果 <code>module.exports</code> 对象是一个对象)。</p><p>当使用 Bun&#39;s 打包时，它的工作原理不同。bun 的打包程序将 CommonJS 模块包装在 <code>require_\${moduleName}</code> 函数中，该函数返回 <code>module.exports</code> 对象。</p></details>`,57),e=[p];function t(c,r,E,i,y,d){return o(),a("div",null,e)}const h=s(l,[["render",t]]);export{m as __pageData,h as default};
