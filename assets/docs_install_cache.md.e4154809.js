import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.400dfe9a.js";const m=JSON.parse('{"title":"全局缓存","description":"","frontmatter":{},"headers":[],"relativePath":"docs/install/cache.md","filePath":"docs/install/cache.md","lastUpdated":1696598272000}'),l={name:"docs/install/cache.md"},o=n(`<h1 id="全局缓存" tabindex="-1">全局缓存 <a class="header-anchor" href="#全局缓存" aria-label="Permalink to &quot;全局缓存&quot;">​</a></h1><p>从注册表下载的所有包都存储在一个全局缓存中，该缓存位于 <code>~/.bun/Install/</code> 缓存。它们存储在名为 <code>\${name}@\${Version}</code>的子目录中，因此可以缓存一个包的多个版本。</p><details class="details custom-block"><summary>配置缓存行为</summary><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[install.cache]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 用于放置缓存的目录</span></span>
<span class="line"><span style="color:#B392F0;">dir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;~/.bun/install/cache&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 当为 true 时，不要从全局缓存加载。</span></span>
<span class="line"><span style="color:#6A737D;"># Bun 仍然可以写入 node_modules/.cache</span></span>
<span class="line"><span style="color:#B392F0;">disable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#6A737D;">#如果为 true，将始终从注册表中解析最新版本</span></span>
<span class="line"><span style="color:#B392F0;">disableManifest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[install.cache]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 用于放置缓存的目录</span></span>
<span class="line"><span style="color:#6F42C1;">dir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;~/.bun/install/cache&quot;</span></span>
<span class="line"><span style="color:#6A737D;"># 当为 true 时，不要从全局缓存加载。</span></span>
<span class="line"><span style="color:#6A737D;"># Bun 仍然可以写入 node_modules/.cache</span></span>
<span class="line"><span style="color:#6F42C1;">disable</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#6A737D;">#如果为 true，将始终从注册表中解析最新版本</span></span>
<span class="line"><span style="color:#6F42C1;">disableManifest</span><span style="color:#24292E;"> </span><span style="color:#032F62;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span></code></pre></div></details><h2 id="最大限度地减少重新下载" tabindex="-1">最大限度地减少重新下载 <a class="header-anchor" href="#最大限度地减少重新下载" aria-label="Permalink to &quot;最大限度地减少重新下载&quot;">​</a></h2><p>Bun 努力避免多次重新下载软件包。安装包时，如果缓存中已包含 package.json 指定范围内的版本，则 Bun 将使用缓存的包，而不是再次下载。</p><details class="details custom-block"><summary>安装详细信息</summary><p>如果 Semver 版本具有预发布后缀 <code>(1.0.0-Beta.0)</code> 或构建后缀 <code>(1.0.0+20220101)</code> ，则将其替换为该值的散列，以减少与长文件路径相关的错误机会。</p><p>如果存在 <code>node_modules</code> 文件夹，则在安装之前，Bun 会检查 <code>node_modules</code> 是否包含具有适当版本的所有预期包。如果包含，则 bun 安装完成。Bun 使用自定义 JSON 解析器，一旦找到 <code>&quot;name&quot;</code> 和 <code>&quot;version&quot;</code> 就停止解析。</p><p>如果包丢失或具有与 Package.json 不兼容的版本，则 Bun 会在缓存中检查兼容的模块。如果找到，则将其安装到 <code>node_modules</code> 中。否则，将从注册表下载程序包并进行安装。</p></details><h2 id="快速复制" tabindex="-1">快速复制 <a class="header-anchor" href="#快速复制" aria-label="Permalink to &quot;快速复制&quot;">​</a></h2><p>一旦将包下载到缓存中，Bun 仍然需要将这些文件复制到 <code>node_modules</code> 中。Bun 使用可用的最快系统调用来执行此任务。在 Linux 上，它使用硬链接; 在 macOS 上，它使用 <code>clonefile</code>。</p><h2 id="节省磁盘空间" tabindex="-1">节省磁盘空间 <a class="header-anchor" href="#节省磁盘空间" aria-label="Permalink to &quot;节省磁盘空间&quot;">​</a></h2><p>由于 Bun 使用硬链接将模块复制到 Linux 上项目的 <code>node_modules</code> 目录中，因此包的内容仅存在于磁盘上的单个位置，从而大大减少了 <code>node_modules</code> 专用的磁盘空间量。</p><p>此功能不会扩展到 macOS，出于性能原因，macOS 使用 clonefile。</p><details class="details custom-block"><summary>安装策略</summary><p>此行为可使用 <code>--backend</code> 标志进行配置，Bun 的所有包管理命令都遵守此标志。</p><ul><li><p><code>hardlink</code>：Linux 上的默认设置。</p></li><li><p><code>clonefile</code>：macOS 上的 <code>clonefile</code> 默认值。</p></li><li><p><code>clonefile_each_dir</code>： 与 <code>clonefile</code> 类似，只是它在每个目录中单独克隆每个文件。它仅在 macOS 上可用，并且执行速度往往比 clonefile 慢。</p></li><li><p><code>copyfile</code>： 当上述任何一个失败时使用的回退。这是最慢的选择。在 macOS 上，它使用 <code>fcopyfile()</code>; 在 Linux 上，它使用 <code>copy_file_range()</code>。</p></li><li><p><code>symlink</code>：目前仅使用 <code>file:</code> (并最终链接到：) <code>dependencies</code>。为了防止无限循环，它跳过符号链接 node_modules 文件夹。</p></li><li><p>如果您使用 <code>--backend=symlink</code> 安装，Node.js 将不会解析依赖关系的 <code>node_modules</code>，除非每个依赖关系都有自己的 <code>node_modules</code> 文件夹，或者您将 <code>--preserve-symlinks</code> 传递给 node。请参阅 <a href="https://nodejs.org/api/cli.html#--preserve-symlinks" target="_blank" rel="noreferrer"><code>--preserve-symllinks</code> 上的 Node.js 文档</a>。</p></li><li><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--backend</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">symlink</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">node</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--preserve-symlinks</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./foo.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--backend</span><span style="color:#24292E;"> </span><span style="color:#032F62;">symlink</span></span>
<span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">node</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--preserve-symlinks</span><span style="color:#24292E;"> </span><span style="color:#032F62;">./foo.js</span></span></code></pre></div></li></ul><p>Bun 的运行时当前不公开与 <code>--preserve-symlink</code> 等价的符号链接。</p></details>`,12),p=[o];function c(t,d,r,i,y,u){return a(),e("div",null,p)}const h=s(l,[["render",c]]);export{m as __pageData,h as default};
