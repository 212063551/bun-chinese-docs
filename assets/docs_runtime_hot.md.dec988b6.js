import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.400dfe9a.js";const p="/assets/hot.675db686.gif",o="/assets/hot01.a978d84c.gif",b=JSON.parse('{"title":"监视模式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/runtime/hot.md","filePath":"docs/runtime/hot.md","lastUpdated":1696598272000}'),e={name:"docs/runtime/hot.md"},t=l('<h1 id="监视模式" tabindex="-1">监视模式 <a class="header-anchor" href="#监视模式" aria-label="Permalink to &quot;监视模式&quot;">​</a></h1><p>Bun 支持两种通过 CLI 标志的自动重载：</p><ul><li><code>--watch</code>，当导入的文件发生更改时，该模式会硬启动 Bun 的进程。</li><li><code>-- hot</code> 模式，当导入的文件更改时，bun 会自动软加载代码 (而无需重新启动进程)。</li></ul><h2 id="watch-模式" tabindex="-1"><code>--watch</code> 模式 <a class="header-anchor" href="#watch-模式" aria-label="Permalink to &quot;`--watch` 模式&quot;">​</a></h2><p><code>--watch</code> 模式可以与 <code>bun test</code> 一起使用，也可以在运行 TypeScript、JSX 和 JavaScript 文件时使用。</p><p>要在 <code>--watch</code> 模式下运行文件，请执行以下操作：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.tsx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.tsx</span></span></code></pre></div><p>要在 <code>--watch</code> 模式下运行测试:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><p>在 <code>--watch</code> 模式下，Bun 会跟踪所有导入的文件并监视它们的更改。检测到更改后，Bun 会重新启动进程，保留初始运行中使用的相同的 CLI 参数和环境变量集。如果 Bun 崩溃，<code>--watch</code> 将尝试自动重新启动该过程。</p><blockquote><p><strong>⚡️ 重新加载速度很快。</strong> 您可能习惯使用文件系统观察器来使用多层库来包装本机 API，但是糟糕的是，它们依赖于轮询。</p><p>相反，Bun 使用操作系统本机文件系统监视程序 api (如 kqueue 或 inotify) 来检测对文件的更改。Bun 还进行了许多优化以使其能够扩展到更大的项目 (例如为文件描述符设置高 rlimit，静态分配的文件路径缓冲区，在可能的情况下重用文件描述符等)。</p></blockquote><p>下面的示例显示了 Bun 在编辑文件时实时重新加载文件，并将 VSCode 配置为在<a href="https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save" target="_blank" rel="noreferrer">每次击键时保存文件</a>。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-VyScr" id="tab-kKnDyqJ" checked="checked"><label for="tab-kKnDyqJ">bash</label><input type="radio" name="group-VyScr" id="tab-PSNpLlH"><label for="tab-PSNpLlH">watchy.tsx</label></div><div class="blocks"><div class="language-sh vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">watchy.tsx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">watchy.tsx</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">watchy.tsx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">watchy.tsx</span></span></code></pre></div></div></div><p>在这个例子中，Bun 是</p><p><img src="'+p+'" alt="hot"></p><p>在监视模式下运行 <code>bun test</code>，并启用 <code>save-on-keypress</code> ：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--watch</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--watch</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><p><img src="'+o+`" alt="hot"></p><h2 id="hot模式" tabindex="-1"><code>--hot</code>模式 <a class="header-anchor" href="#hot模式" aria-label="Permalink to &quot;\`--hot\`模式&quot;">​</a></h2><p>在使用 Bun 执行代码时，使用 <code>bun --hot</code> 来启用热重载。这与 <code>--watch</code> 模式不同，因为 <code>bun --hot</code> 不会重启进程。相反，它会检测代码更改并使用新代码更新其内部模块缓存。</p><blockquote><p>注意 - 这与浏览器中的热重新加载不同!许多框架提供了 “热重载” 体验，您可以在其中编辑和保存前端代码 ( 例如，React 组件 ) 并查看浏览器中反映的更改，而无需刷新页面。 <code>bun --hot</code> 相当于体验这种的服务器端。要在浏览器中获得热重载，请使用像 Vite 这样的框架。</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--hot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">server.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--hot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">server.ts</span></span></code></pre></div><p>从 入口点 (上面的示例中的 server.ts) 开始，Bun 构建所有导入的源文件 (不包括 node_modules 中的那些文件) 的注册表，并监视它们的更改。当检测到更改时，Bun 执行 “软重载”。所有文件都将重新评估，但所有全局状态 (尤其是 <code>globalThis</code> 对象) 都将持久化。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 让 TypeSCript 开心</span></span>
<span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> global {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> count</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">globalThis.count </span><span style="color:#F97583;">??=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Reloaded \${</span><span style="color:#E1E4E8;">globalThis</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">} times\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">globalThis.count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 阻止\`Bun Run\`退出</span></span>
<span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {}, </span><span style="color:#79B8FF;">1000000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 让 TypeSCript 开心</span></span>
<span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> global {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> count</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">globalThis.count </span><span style="color:#D73A49;">??=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Reloaded \${</span><span style="color:#24292E;">globalThis</span><span style="color:#032F62;">.</span><span style="color:#24292E;">count</span><span style="color:#032F62;">} times\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">globalThis.count</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 阻止\`Bun Run\`退出</span></span>
<span class="line"><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {}, </span><span style="color:#005CC5;">1000000</span><span style="color:#24292E;">);</span></span></code></pre></div><p>如果使用 <code>bun --hot server.ts</code> 运行此文件，则每次保存文件时都会看到重新加载计数增量。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">bun</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--hot</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.ts</span></span>
<span class="line"><span style="color:#6A737D;"># Reloaded 1 times</span></span>
<span class="line"><span style="color:#6A737D;"># Reloaded 2 times</span></span>
<span class="line"><span style="color:#6A737D;"># Reloaded 3 times</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">bun</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--hot</span><span style="color:#24292E;"> </span><span style="color:#032F62;">index.ts</span></span>
<span class="line"><span style="color:#6A737D;"># Reloaded 1 times</span></span>
<span class="line"><span style="color:#6A737D;"># Reloaded 2 times</span></span>
<span class="line"><span style="color:#6A737D;"># Reloaded 3 times</span></span></code></pre></div><p>像 nodemon 这样的传统文件监视器会重新启动整个过程，因此 HTTP 服务器和其他有状态对象会丢失。相比之下， <code>bun --hot</code> 能够在不重新启动进程的情况下展示更新后的代码。</p><h2 id="http-服务" tabindex="-1">HTTP 服务 <a class="header-anchor" href="#http-服务" aria-label="Permalink to &quot;HTTP 服务&quot;">​</a></h2><p>例如，这使得可以在不关闭服务器本身的情况下更新您的 HTTP 请求处理程序。当您保存文件时，您的 HTTP 服务器将使用更新的代码重新加载，而无需重新启动进程。这导致刷新速度非常快。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">globalThis.count</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">??=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">globalThis.count++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Bun.serve(</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">fetch(req:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Request</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Response</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">Reloaded</span><span style="color:#9ECBFF;"> \${</span><span style="color:#E1E4E8;">globalThis</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">} times\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">port:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3000</span><span style="color:#9ECBFF;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">globalThis.count</span><span style="color:#24292E;"> </span><span style="color:#032F62;">??=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">globalThis.count++</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Bun.serve(</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">fetch(req:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Request</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">new</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Response</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span><span style="color:#6F42C1;">Reloaded</span><span style="color:#032F62;"> \${</span><span style="color:#24292E;">globalThis</span><span style="color:#032F62;">.</span><span style="color:#24292E;">count</span><span style="color:#032F62;">} times\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">port:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3000</span><span style="color:#032F62;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><blockquote><p>注意-在 Bun 的未来版本中，计划支持 Vite 的 <code>i<wbr>mport.meta.hot</code>，以实现更好的生命周期管理以进行热重新加载并与生态系统保持一致。</p></blockquote><details class="details custom-block"><summary>实施详情</summary><p>在热重装时，bun:</p><ul><li>重置内部 <code>require</code> 缓存和 ES 模块注册表 (<code>Loader.registry</code>)</li><li>同步运行垃圾收集器 (以最小化内存泄漏，以运行时性能为代价)</li><li>从头开始重新转换所有代码 (包括 sourcemaps)</li><li>使用 JavaScriptCore 重新计算代码 这个实现并没有特别优化。它会重新传输未更改的文件。它不会尝试增量编译。这是一个起点。</li></ul></details>`,32),c=[t];function r(y,i,E,d,h,u){return a(),n("div",null,c)}const g=s(e,[["render",r]]);export{b as __pageData,g as default};
